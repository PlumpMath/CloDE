<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:ibc="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit"
    xmlns:eomc="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Converters;assembly=Xceed.Wpf.Toolkit"
    xmlns:pg="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid;assembly=Xceed.Wpf.Toolkit"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:xctk="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
    xmlns:commands="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Commands;assembly=Xceed.Wpf.Toolkit">
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <ibc:InverseBoolConverter x:Key="InverseBoolConverter" />
  <eomc:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
  <x:StaticExtension Key="EmptyString" Member="sys:String.Empty" />
  <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#FFFFB700" />
  <LinearGradientBrush x:Key="MouseOverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFEFBF4" />
    <GradientStop Offset="0.19" Color="#FFFDE7CE" />
    <GradientStop Offset="0.39" Color="#FFFDDEB8" />
    <GradientStop Offset="0.39" Color="#FFFFCE6B" />
    <GradientStop Offset="0.79" Color="#FFFFDE9A" />
    <GradientStop Offset="1" Color="#FFFFEBAA" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="CheckedBorderBrush" Color="#FFC29B29" />
  <LinearGradientBrush x:Key="CheckedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFFDCA0" />
    <GradientStop Offset="0.18" Color="#FFFFD692" />
    <GradientStop Offset="0.39" Color="#FFFFC45D" />
    <GradientStop Offset="1" Color="#FFFFD178" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="PressedBorderBrush" Color="#FFC29B29" />
  <LinearGradientBrush x:Key="PressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFE3C085" />
    <GradientStop Offset="0.19" Color="#FFF4CC89" />
    <GradientStop Offset="0.36" Color="#FFF5C777" />
    <GradientStop Offset="0.36" Color="#FFF5BB56" />
    <GradientStop Offset="0.79" Color="#FFF4CE9A" />
    <GradientStop Offset="1" Color="#FFF3E28D" />
  </LinearGradientBrush>
  <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FrameworkElement.Height" Value="22" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
    <Setter Property="ToolTipService.ShowDuration" Value="20000" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid SnapsToDevicePixels="True">
            <Border Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" CornerRadius="2" />
            <Border Name="MiddleBorder" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="#00FFFFFF" CornerRadius="2">
              <Border Name="InnerBorder" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="#00FFFFFF" CornerRadius="2" Padding="{TemplateBinding Control.Padding}">
                <StackPanel Name="StackPanel" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                  <ContentPresenter Name="Content" Content="{TemplateBinding ContentControl.Content}" Margin="1" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80FFFFFF" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Content" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="#FF9E9E9E" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource CheckedBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="OuterBorder" Value="{StaticResource CheckedBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFE7CBAD" Offset="0" />
                    <GradientStop Color="#FFF7D7B5" Offset="0.1" />
                    <GradientStop Color="#FFFFD38C" Offset="0.36" />
                    <GradientStop Color="#FFFFC75A" Offset="0.36" />
                    <GradientStop Color="#FFFFEFA5" Offset="1" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#00FFFFFF" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="MiddleBorder" Property="Border.Background">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#40FFFEFE" Offset="0" />
                    <GradientStop Color="#40FFFEFE" Offset="0.39" />
                    <GradientStop Color="#20FFCE68" Offset="0.39" />
                    <GradientStop Color="#20FFCE68" Offset="0.69" />
                    <GradientStop Color="#10FFFFFF" Offset="1" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.Height" Value="22" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
    <Setter Property="ToolTipService.ShowDuration" Value="20000" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid SnapsToDevicePixels="True">
            <Border Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" CornerRadius="2" />
            <Border Name="MiddleBorder" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="#00FFFFFF" CornerRadius="2">
              <Border Name="InnerBorder" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="#00FFFFFF" CornerRadius="2" Padding="{TemplateBinding Control.Padding}">
                <StackPanel Name="StackPanel" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                  <ContentPresenter Name="Content" Content="{TemplateBinding ContentControl.Content}" Margin="1" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80FFFFFF" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Content" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="#FF9E9E9E" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#00FFFFFF" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="GlyphBrush" Color="#FF31347C" />
  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Rectangle Name="Rectangle" Margin="0,0,0,0" Fill="#00FFFFFF" />
      <Path Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="M0,0L4,4 8,0z" RenderTransformOrigin="0.5,0.5">
        <Path.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1" ScaleY="1" />
            <SkewTransform AngleX="0" AngleY="0" />
            <RotateTransform Angle="-90" />
            <TranslateTransform X="0" Y="0" />
          </TransformGroup>
        </Path.RenderTransform>
      </Path>
      <Path Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="M0,4L4,0 8,4z" RenderTransformOrigin="0.5,0.5">
        <Path.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1" ScaleY="1" />
            <SkewTransform AngleX="0" AngleY="0" />
            <RotateTransform Angle="135" />
            <TranslateTransform X="0" Y="0" />
          </TransformGroup>
        </Path.RenderTransform>
      </Path>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible" />
        <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="Down_Arrow" Property="UIElement.OpacityMask" Value="#FF000000" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
    <Setter Property="Control.Padding" Value="0" />
    <Setter Property="Control.Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor5}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Name="ContentRow" Height="*" />
            </Grid.RowDefinitions>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="#FFF0F0F0">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="20" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ToggleButton Template="{StaticResource ExpanderToggleButton}" OverridesDefaultStyle="True" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <ContentPresenter Grid.Column="1" Margin="1" RecognizesAccessKey="True" ContentSource="Header" TextElement.FontWeight="Bold" />
              </Grid>
            </Border>
            <Border Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor5}" Padding="10 0 0 0">
              <Border Background="#FFFFFFFF" BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="False" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="True">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
    <Setter Property="Control.Padding" Value="10 0 0 0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Border Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" Padding="0 0 0 0">
              <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="False" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="True">
              <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type pg:PropertyItem}" TargetType="{x:Type pg:PropertyItem}">
      <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="UIElement.Focusable" Value="True" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type pg:PropertyItem}">
            <Border Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}" ContextMenuService.Placement="Bottom" ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}">
            <Grid VerticalAlignment="Center" HorizontalAlignment="Stretch">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pg:PropertyGrid}}}" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Border Name="PART_Name" BorderThickness="0.5" BorderBrush="#FFF0F0F0">
                <Grid Margin="2,2,2,2">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="15" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Border Grid.Column="0">
                      <ToggleButton Template="{StaticResource ExpanderToggleButton}" OverridesDefaultStyle="True" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    </Border>
                    <TextBlock Grid.Column="1" HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis" Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}" />
                  </Grid>
                  <Grid Grid.Column="1" HorizontalAlignment="Right" Margin="5,0,5,0" p15:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True" Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}" ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}}" xmlns:p15="clr-namespace:Xceed.Wpf.Toolkit.Core.Utilities;assembly=Xceed.Wpf.Toolkit,Version=1.9.0.0,Culture=neutral,PublicKeyToken=3e4669d2f30244f4">
                    <Image Name="_optionsImage" Width="11" Height="11" Source="{Binding AdvancedOptionsIcon, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" />
                  </Grid>
                </Grid>
              </Border>
              <Border Name="PART_Editor" BorderThickness="0.5" BorderBrush="#FFF0F0F0" Grid.Column="1" Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}">
                <ContentControl Name="content" Content="{TemplateBinding pg:PropertyItem.Editor}" VerticalAlignment="Center" Focusable="False" IsTabStop="False" IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=pg:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}" />
              </Border>
              <Expander Name="_propertyExpander" Grid.ColumnSpan="2" Grid.Row="1" IsExpanded="{TemplateBinding pg:PropertyItem.IsExpanded}" Style="{StaticResource PropertyExpanderStyle}" IsEnabled="True">
                <ItemsControl IsTabStop="False" Focusable="False" ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                </ItemsControl>
              </Expander>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter TargetName="PART_Name" Property="Border.Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor5}" />
            </Trigger>
            <Trigger Property="pg:PropertyItem.IsSelected" Value="True">
                <Setter TargetName="PART_Name" Property="Border.Background" Value="{DynamicResource AccentColorBrush}" />
                <Setter TargetName="PART_Name" Property="TextElement.Foreground" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor2}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="content" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
              <Setter Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" Property="FrameworkElement.ToolTip" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type pg:PropertyGrid}" TargetType="{x:Type pg:PropertyGrid}">
    <Style.Resources>
      <eomc:SelectedObjectConverter x:Key="objectConverter" />
    </Style.Resources>
    <!-- <Setter Property="pg:PropertyGrid.AdvancedOptionsMenu" Value="{StaticResource DefaultAdvancedOptionsMenu}" /> -->
    <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="pg:PropertyGrid.SelectedObjectType" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=Type}" />
    <Setter Property="pg:PropertyGrid.SelectedObjectTypeName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource objectConverter}, ConverterParameter=TypeName}" />
    <Setter Property="pg:PropertyGrid.SelectedObjectName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject.Name, FallbackValue={StaticResource EmptyString}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type pg:PropertyGrid}">
          <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="5" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <StackPanel Orientation="Horizontal" Margin="6,2,0,4" Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock Text="{TemplateBinding pg:PropertyGrid.SelectedObjectTypeName}" TextBlock.FontWeight="Bold" />
                <TextBlock Text="{TemplateBinding pg:PropertyGrid.SelectedObjectName}" Margin="5,0,0,0" />
              </StackPanel>
              <Grid Name="toolsContainer" Grid.Row="1" Margin="4,0,4,4">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid Name="sortButtonContainer" Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor5}" Margin="4" Visibility="{Binding ShowSortOptions, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <StackPanel Orientation="Horizontal" Margin="1">
                    <RadioButton VerticalAlignment="Center" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Categorized" IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}">
                      <Image Source="/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/Categorize16.png" Width="16" Height="16" />
                    </RadioButton>
                    <RadioButton VerticalAlignment="Center" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Alphabetical" IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}">
                      <Image Source="/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/SortAscending16.png" Width="16" Height="16" />
                    </RadioButton>
                  </StackPanel>
                </Grid>
                <Border Name="searchBoxContainer" Grid.Column="1" Margin="4,4,0,4" Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}" BorderBrush="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}" BorderThickness="1" Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <xctk:WatermarkTextBox x:Name="_txtFilter" Background="#00FFFFFF" Watermark="{TemplateBinding pg:PropertyGrid.FilterWatermark}" Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}">
                      <xctk:WatermarkTextBox.Style>
                        <Style TargetType="{x:Type Control}">
                          <Setter Property="Control.BorderThickness" Value="0" />
                          <Style.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                              <Setter Property="Control.BorderThickness" Value="1" />
                            </Trigger>
                          </Style.Triggers>
                        </Style>
                      </xctk:WatermarkTextBox.Style>
                    </xctk:WatermarkTextBox>
                    <Button Grid.Column="1" Command="commands:PropertyGridCommands.ClearFilter" Style="{StaticResource ClearFilterButtonStyle}" HorizontalAlignment="Left">
                      <Image Source="/Xceed.Wpf.Toolkit;component/PropertyGrid/Images/ClearFilter16.png" Width="16" Height="16" />
                    </Button>
                  </Grid>
                </Border>
              </Grid>
              <Grid Grid.Row="2" Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor1}">
                <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Auto">
                  <ItemsControl IsTabStop="False" Focusable="False" ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.GroupStyle>
                      <GroupStyle>
                        <GroupStyle.ContainerStyle>
                          <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Control.Template">
                              <Setter.Value>
                                <ControlTemplate>
                                  <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
                                    <Expander Style="{StaticResource ExpanderStyle}" IsExpanded="True" Header="{Binding Name}">
                                      <ItemsPresenter />
                                    </Expander>
                                  </Border>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </GroupStyle.ContainerStyle>
                      </GroupStyle>
                    </ItemsControl.GroupStyle>
                  </ItemsControl>
                </ScrollViewer>
                <Thumb Name="PART_DragThumb" HorizontalAlignment="Left" Width="5" Margin="6,0,0,0" Cursor="SizeWE">
                  <Thumb.Template>
                    <ControlTemplate>
                        <Border Background="{DynamicResource AvalonDock_ThemeMetro_BaseColor5}" />
                    </ControlTemplate>
                  </Thumb.Template>
                </Thumb>
              </Grid>
              <GridSplitter Height="3" Grid.Row="3" HorizontalAlignment="Stretch" Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
              <StackPanel Grid.Row="4" Margin="0,0,0,5" Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock Padding="2 2 2 0" TextBlock.FontWeight="Bold" Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock Padding="5 2 2 0" TextWrapping="WrapWithOverflow" Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}" />
              </StackPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="searchBoxContainer" Property="UIElement.Visibility" Value="Collapsed" />
                <Condition SourceName="sortButtonContainer" Property="UIElement.Visibility" Value="Collapsed" />
              </MultiTrigger.Conditions>
              <Setter TargetName="toolsContainer" Property="UIElement.Visibility" Value="Collapsed" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>
